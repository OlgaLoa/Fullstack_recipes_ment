# роль сериализатора выполнять конвертирование произвольных объектов языка Python в формат JSON
# в том числе модели фреймворка Django и наборы QuerySet). И, обратно, из JSON – в соответствующие объекты Python.

# хорошей практикой считается, когда здесь же в сериализаторе определяется алгоритм сохранения или изменения данных в БД
#Перейдем к нашему api

from rest_framework import serializers
from .models import *

# Чтобы представление «знало» как формировать ответ, нужно определить класс сериализатора
class RecipeSerializer(serializers.ModelSerializer):
    class Meta:
        model = Recipe
        fields =  '__all__'

# Чтобы представление «знало» как формировать ответ, нужно определить класс сериализатора
class CategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = Category #модель, с которой должен работать данный сериализатор
        fields =  '__all__' #набор полей таблицы (атрибутов модели) для сериализации (для их перевода в JSON-формат и обратно)



# Сериализация — это конвертация объекта Python в другой формат. После сериализации можно сохранить объект в файл или послать его через сеть.
# отображать модель Django в браузере с помощью конвертации в JSON;
# делать запросы CRUD (create – read – update – delete) к API в формате JSON.

# Задачей представления является обработка запроса и отправка результата пользователю.
# Так как для обработки необходимо сформировать некоторые данные, как правило, в формате JSON,
# то для этого управление передается специальному объекту – сериализатору.
# Сериализаторы – это «сердце» Django REST Framework. Именно они формируют данные для ответа на
# API-запросы, а также выполняют парсинг входной информации. Например, сериализатор может взять
# данные из таблиц БД и вернуть JSON-строку узлу, который отправил запрос. Или, сериализатор
# может удалить или изменить данные в таблицах БД по определенному запросу.


